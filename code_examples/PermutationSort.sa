
insert e ls = (Cons e ls) ? case ls of
  Cons x xs -> Cons x (insert e xs) ;;

perm ls = case ls of
  Nil -> Nil ;
  Cons x xs -> insert x (perm xs) ;;

isSorted ls = case ls of
  Nil -> True ;
  Cons x xs -> case xs of
    Nil -> True ;
    Cons y ys -> x <= y && isSorted (Cons y ys) ;;;

sort ls = choose sls = perm ls in case isSorted sls of
  True -> sls ;;

-- results $ (sort (convert [1::Integer,4,3,-1,-6,-7])) >>= convert :: Set [Integer]
